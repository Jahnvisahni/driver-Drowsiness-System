{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f18a6394",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "ERROR: Could not find a version that satisfies the requirement tkinter (from versions: none)\n",
      "ERROR: No matching distribution found for tkinter\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "34e2b5f8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pygame 2.1.2 (SDL 2.0.18, Python 3.9.12)\n",
      "Hello from the pygame community. https://www.pygame.org/contribute.html\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Exception in Tkinter callback\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\kusha\\anaconda3\\lib\\tkinter\\__init__.py\", line 1892, in __call__\n",
      "    return self.func(*args)\n",
      "  File \"C:\\Users\\kusha\\AppData\\Local\\Temp\\ipykernel_25136\\1911768205.py\", line 59, in runP\n",
      "    _, frame = cap.read()\n",
      "KeyboardInterrupt\n"
     ]
    }
   ],
   "source": [
    "from tkinter import *\n",
    "root= Tk()\n",
    "root.geometry(\"600x400\")\n",
    "\n",
    "# Importing OpenCV Library for basic image processing functions\n",
    "import cv2\n",
    "# Numpy for array related functions\n",
    "import numpy as np\n",
    "# Dlib for deep learning based Modules and face landmark detection\n",
    "import dlib\n",
    "# face_utils for basic operations of conversion\n",
    "from imutils import face_utils\n",
    "from pygame import mixer\n",
    "global face_frame\n",
    "def runP():\n",
    "    mixer.init()\n",
    "    sound = mixer.Sound('C:\\\\Users\\\\kusha\\\\Downloads\\\\mixkit-alert-bells-echo-765.wav')\n",
    "\n",
    "\n",
    "\n",
    "    # Initializing the camera and taking the instance\n",
    "    cap = cv2.VideoCapture(0)\n",
    "\n",
    "    # Initializing the face detector and landmark detector\n",
    "    detector = dlib.get_frontal_face_detector()\n",
    "    predictor = dlib.shape_predictor(\"shape_predictor_68_face_landmarks.dat\")\n",
    "\n",
    "    # status marking for current state\n",
    "    sleep = 0\n",
    "    drowsy = 0\n",
    "    active = 0\n",
    "    status = \"\"\n",
    "    color = (0, 0, 0)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "    def compute(ptA, ptB):\n",
    "        dist = np.linalg.norm(ptA - ptB)\n",
    "        return dist\n",
    "\n",
    "\n",
    "    def blinked(a, b, c, d, e, f):\n",
    "        up = compute(b, d) + compute(c, e)\n",
    "        down = compute(a, f)\n",
    "        ratio = up/(2.0*down)\n",
    "\n",
    "        # Checking if it is blinked\n",
    "        if (ratio > 0.25):\n",
    "            return 2\n",
    "        elif (ratio > 0.21 and ratio <= 0.25):\n",
    "            return 1\n",
    "        else:\n",
    "            return 0\n",
    "\n",
    "\n",
    "\n",
    "    while True:\n",
    "        _, frame = cap.read()\n",
    "        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n",
    "\n",
    "        faces = detector(gray)\n",
    "        # detected face in faces array\n",
    "        for face in faces:\n",
    "            x1 = face.left()\n",
    "            y1 = face.top()\n",
    "            x2 = face.right()\n",
    "            y2 = face.bottom()\n",
    "\n",
    "\n",
    "\n",
    "            face_frame = frame.copy()\n",
    "            cv2.rectangle(face_frame, (x1, y1), (x2, y2), (0, 255, 0), 2)\n",
    "\n",
    "            landmarks = predictor(gray, face)\n",
    "            landmarks = face_utils.shape_to_np(landmarks)\n",
    "\n",
    "            # The numbers are actually the landmarks which will show eye\n",
    "            left_blink = blinked(landmarks[36], landmarks[37],\n",
    "                                 landmarks[38], landmarks[41], landmarks[40], landmarks[39])\n",
    "            right_blink = blinked(landmarks[42], landmarks[43],\n",
    "                                  landmarks[44], landmarks[47], landmarks[46], landmarks[45])\n",
    "\n",
    "            # Now judge what to do for the eye blinks\n",
    "            if (left_blink == 0 or right_blink == 0):\n",
    "                sleep += 1\n",
    "                drowsy = 0\n",
    "                active = 0\n",
    "                if (sleep > 6):\n",
    "                    status = \"SLEEPING !!!\" \n",
    "                    sound.play()\n",
    "                    color = (255, 0, 0)\n",
    "\n",
    "\n",
    "            elif (left_blink == 1 or right_blink == 1):\n",
    "                sleep = 0\n",
    "                active = 0\n",
    "                drowsy += 1\n",
    "                if (drowsy > 6):\n",
    "                    status = \"Drowsy !\"\n",
    "                    color = (0, 0, 255)\n",
    "\n",
    "            else:\n",
    "                drowsy = 0\n",
    "                sleep = 0\n",
    "                active += 1\n",
    "                if (active > 6):\n",
    "                    status = \"Active :)\"\n",
    "                    color = (0, 255, 0)\n",
    "\n",
    "            cv2.putText(frame, status, (100, 100),\n",
    "                        cv2.FONT_HERSHEY_SIMPLEX, 1.2, color, 3)\n",
    "\n",
    "            for n in range(0, 68):\n",
    "                (x, y) = landmarks[n]\n",
    "                cv2.circle(face_frame, (x, y), 1, (255, 255, 255), -1)\n",
    "\n",
    "        cv2.imshow(\"Frame\", frame)\n",
    "        cv2.imshow(\"Result of detector\", face_frame)\n",
    "        key = cv2.waitKey(1)\n",
    "        if key == 27:\n",
    "            break\n",
    "\n",
    "\n",
    "b1 = Button(root,text=\"START\",command=runP,bg='yellow',fg='red')\n",
    "b1.pack()\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2914bd1e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d652c1ae",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b95c0a9f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "92280d11",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6a31becc",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1f16f9ef",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2fbc42e9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "38f9ed13",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f9738475",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "67d6a7a9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
